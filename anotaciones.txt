Instalamos con scoop el CLI de Symfony

Instalamos el proyecto nuevo de symfony

symfony new >nombre proyecto<

cuando hacemos esto automaticamente nos genera un nuevo repositorio con git.

para hacer el server del proyecto hacemos:

symfony serve -d

- RUTAS - CONTROLADORES

Es controlador es un metodo dentro de una calse

La clase del controlador debe cumplir ciertas reglas para que funcione

. se debe llamar igual el archivo que la clase
. el nombre de la clase/archivo debe termina siempre con Controller: NombreController
. antes de la clase se debe declarar el namespace y en todos los casos debe ser namespace App\Controller;

una vez creada la clase se empiezan a agregar los métodos. Los nombres de los métodos no importan.
los métodos deben ir acompañados de las rutas.
LAs rutas se declaran a través de atributos que se ponen justo arriba de los métodos de la siguiente manera:
   #[Route("/")]
Junto con esto siempre debemos llamar un use para activar las notaciones de symfony:

   use Symfony\Component\Routing\Annotation\Route;

De esta manera php va a poder intrepretar la notación de atriburo.
Cada vez que se hace referencia a una libreria de symfony tiene que haber un use que la llame.

por cada ruta que querramos crear vamos a necesitar un controlador y pero pueden esta todos dentro de la misma clase aunque deben tener funcionaes diferentes.

Asi tambien si queremos que el nombre de la ruta sea dinámico y no tengamos que crear una ruta por cada grupo de elementos que queremos mostrar entonces se usa un comodin:
{slug}
slug es solo una convención que se usa para url seguras pero podríamos ponder cualquier palabra dentro de las llaves que nos va a habilitar el uso de un argumento con el mismo nombre: en este caso $slug

ese argumento lo podemos utilizar como una variable que pasa por get al método:

%[Route('/browse/{slug}')];
public function browse(string $slug): Response {
   return new Response('Aguante el Millonario!);
}

es una buena práctiva tipar las variables a pesar de que el valor por defecto sea del tipo que estamos tipando.

Cuando usamos un argumento comodín estamos obligados a que no esté vacío. Tiene que contener algun valor. PAra evitar esto le podemos asignar valor null por defecto y de esa manero si esta en blanco va a tomarl igual:

public function browse(string $slug = null)

PLANTILLAS

No se utiliza HTML dentro de las clases php de los controladores. Lo que se hacer es RENDERIZAR plantillas a través de los response de los métodos.

para agregar una librerias de plantillas debemos utilizar composer
las plantillas que tiene symfony las podemos ver en:
      composer require template
https://repo.packagist.org: ahi voy a ver la lista de paquetes.

una vez instalado viene con "recetas" recipe que lo configuran automaticamente.

**Hay que tener php 8.1 para poder tener instalado composer recipes
una vez que esta instalado el 8.1 le damos al comando:
   composer update

Y ahora si vamos a tener instadas la librerias necesarias para seguir adelante con symfony 6

ayuda que a la clase del controlador le heredemos el AbstractController
A ella le debemos agregar la llamada al archivo:

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;


class VinylController extends AbstractController {

esta clase nos va a servir para varias cosas entre ellas renderizar templates.
