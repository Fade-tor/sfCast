Instalamos con scoop el CLI de Symfony

Instalamos el proyecto nuevo de symfony

symfony new >nombre proyecto<

cuando hacemos esto automaticamente nos genera un nuevo repositorio con git.

para hacer el server del proyecto hacemos:

symfony serve -d

- RUTAS - CONTROLADORES

Es controlador es un metodo dentro de una calse

La clase del controlador debe cumplir ciertas reglas para que funcione

. se debe llamar igual el archivo que la clase
. el nombre de la clase/archivo debe termina siempre con Controller: NombreController
. antes de la clase se debe declarar el namespace y en todos los casos debe ser namespace App\Controller;

una vez creada la clase se empiezan a agregar los métodos. Los nombres de los métodos no importan.
los métodos deben ir acompañados de las rutas.
LAs rutas se declaran a través de atributos que se ponen justo arriba de los métodos de la siguiente manera:
   #[Route("/")]
Junto con esto siempre debemos llamar un use para activar las notaciones de symfony:

   use Symfony\Component\Routing\Annotation\Route;

De esta manera php va a poder intrepretar la notación de atriburo.
Cada vez que se hace referencia a una libreria de symfony tiene que haber un use que la llame.

por cada ruta que querramos crear vamos a necesitar un controlador y pero pueden esta todos dentro de la misma clase aunque deben tener funcionaes diferentes.

Asi tambien si queremos que el nombre de la ruta sea dinámico y no tengamos que crear una ruta por cada grupo de elementos que queremos mostrar entonces se usa un comodin:
{slug}
slug es solo una convención que se usa para url seguras pero podríamos ponder cualquier palabra dentro de las llaves que nos va a habilitar el uso de un argumento con el mismo nombre: en este caso $slug

ese argumento lo podemos utilizar como una variable que pasa por get al método:

%[Route('/browse/{slug}')];
public function browse(string $slug): Response {
   return new Response('Aguante el Millonario!);
}

es una buena práctiva tipar las variables a pesar de que el valor por defecto sea del tipo que estamos tipando.

Cuando usamos un argumento comodín estamos obligados a que no esté vacío. Tiene que contener algun valor. PAra evitar esto le podemos asignar valor null por defecto y de esa manero si esta en blanco va a tomarl igual:

public function browse(string $slug = null)

PLANTILLAS

No se utiliza HTML dentro de las clases php de los controladores. Lo que se hacer es RENDERIZAR plantillas a través de los response de los métodos.

para agregar una librerias de plantillas debemos utilizar composer
las plantillas que tiene symfony las podemos ver en:
      composer require template
https://repo.packagist.org: ahi voy a ver la lista de paquetes.

una vez instalado viene con "recetas" recipe que lo configuran automaticamente.

**Hay que tener php 8.1 para poder tener instalado composer recipes
una vez que esta instalado el 8.1 le damos al comando:
   composer update

Y ahora si vamos a tener instadas la librerias necesarias para seguir adelante con symfony 6

ayuda que a la clase del controlador le heredemos el AbstractController
A ella le debemos agregar la llamada al archivo:

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;


class VinylController extends AbstractController {

esta clase nos va a servir para varias cosas entre ellas renderizar templates.

Agregamos al controlador el metodo de render() en el return:

return this->render('vinyl/homepage.html.twig', [Array con variales que se le quieren pasar al template: 'title'=>'PB & Jams']);

Se usa tener una carpeta con el nombre del controlador y archivo con el nombre del método.html.twig con el combre del método 

Ahora para que haya algo que el render pueda renderisar hacemos la carpeta dentro de la carpeta templates (todos los twig van ahí) y dentro de la carpeta la nueva platilla.

dentro de la plantilla twig hay que usar una syntaxis en particular:

Decir algo:
{{imprime lo que haya adentro}}

funciona como javascript entonces no hace falta usar las notaciones de php como $.
de esta forma si ponemos {{hola}} va a buscar una variable que se llame hola.
para imprimir hola lo debemos poner entre comillas {{'hola'}}.

Comentar algo:
{# Esto sirve para comentar dentro de un template de twig #}

Se usa para dejar comentarios en el archivo sin que el template los tome en cuenta.

Hacer algo:
{% aca se incluyen los IF los FOR y los SET %}

Dentro de las etiquetas {# #} se agregan las sentencias usadas por ejemplo para recorrer las arrays.
Como se dijo antes, es muy parecido a javascript entonces cuando tenemos que recorrer arrays asociativos le agregamos el ordenador al final del nombre de la variable luego de un punto:

{% for track in tracks %}
   Aca adentro va la parte que queremos que se muestre en loop. y va como html
   {{ track.ordenador1}} - {{track.ordenador2}}

{% endfor %} Todas las sentencias empiezan y terminan: endfor, endif, endset 

TWIG tiene un monton de funcionalidades que pueden agregarse a la syntaxis muy facilmente:

{{ track.ordenador1|upper}} converitmos el valor traido en mayusculas.

Los filtros pueden encadenarse simplemente agregando |un|atrs|deotro

Herencia de plantillas:

las plantillas pueden heredarse de forma que el código que se repite no deba ser repetido.

En la parte de arriba de nuestro archivo twig debemos incluir:

{% extends 'base.html.twig' %}

para que esto tenga efecto debemos decirle a twig en qué parte queremos que se embeba nuestro nuevo codigo.

para eso la plantilla mayo lleva "bloques" dentro y cada bloque tiene un nombre.
solo debemos "encerrar" nuestro código en el bloque en el que lo queremos incluir:

{% block body%}

{% endblock %}

PERFILADOR: 

Instalar el paquete

   composer require debug//// No funciona asi que hay que correrlo completo: composer require symfony/debug-pack

esto instala una barra de debug en nuetro server local.

Tambien nos permite ver que hay dentro de una variable agregando un metodo al controlador:

dd($variable);
Esto va a romper la ejecusion y mostrarnos exactamente que hay dentro de esa variable.

Hay otra forma de hacer lo mismo sin que se rompa la ejecución:

dump($variable);

Esto agrega un icono de mira a la barra de debug del servidor y alli nos muestra la info de la variable.
Esta segunda opción tambien se puede usar en twig {{ dump($variable) }} y si no le ponemos una variable nos muestra de todas las que se esten ejecutando en twig.

CSS

copiamos las imagenes y las agregamos a la carpeta public porque si no no se pueden ver desde el explorador.
El archivo css tambien se agrega en public. creamos una carpeta styles dentro de public y ponemos allí nuestros archivos de css.
la carpeta public es la carpeta base de nuestra página porque el index está ahi y todo pasa por el index. De esta forma no hace falta aclararlo en la ruta a la hora de estilos:
/styles/app.CSS


ASSET

empezamos a usar assets
para ello debemos instalar la librería:

   composer require symfony/asset

la funcion asset lo que hace es detectar automaticamente donde se encuentran nuestros archivos de recursos.
De esta manera nos permite no tener que aclarar exactamente la ruta sino solo la carpeta y ekl nombre del archivo.


minuto 9 de activos Css ....











